#! /usr/bin/perl -w
###################################################################
# Oreon is developped with GPL Licence 2.0 
#
# GPL License: http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
#
# Developped by : Julien Mathis - Romain Le Merlus 
#                 Mathavarajan Sugumaran
#
###################################################################
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
#    For information : contact@merethis.com
####################################################################
#
# Plugin init
#

use strict;
use Net::SNMP qw(:snmp oid_lex_sort);
use FindBin;
use lib "$FindBin::Bin";
use lib "@NAGIOS_PLUGINS@";
use utils qw($TIMEOUT %ERRORS &print_revision &support);

if (eval "require centreon" ) {
    use centreon qw(get_parameters);
    use vars qw($VERSION %centreon);
    %centreon = get_parameters();
} else {
    print "Unable to load centreon perl module\n";
    exit $ERRORS{'UNKNOWN'};
}

use vars qw($VERSION %centreon);
use vars qw(%centreon);
$VERSION = '$Revision: 1.2 $';
$VERSION =~ s/^\$.*:\W(.*)\W.+?$/$1/;

use vars qw($PROGNAME);
use Getopt::Long;
use vars qw($opt_V $opt_h $opt_v $opt_C $opt_H $opt_w $opt_c);

#
# Plugin var init
#
$PROGNAME = "$0";

my ($row, @flg_created, @last_check_time, @last_in_errors, @last_out_errors, $result_in, $result_out, @nb_out_errors, @nb_in_errors, $update_time, $db_file);
my $pathtolibexecnt = $centreon{NAGIOS_PLUGINS};

sub print_help ();
sub print_usage ();

Getopt::Long::Configure('bundling');
GetOptions
    ("h"   => \$opt_h, "help"         => \$opt_h,
     "V"   => \$opt_V, "version"      => \$opt_V,
     "v=s" => \$opt_v, "snmp=s"       => \$opt_v,
     "C=s" => \$opt_C, "community=s"  => \$opt_C,
     "w=s" => \$opt_w, "warning=s"    => \$opt_w,
     "c=s" => \$opt_c, "critical=s"   => \$opt_c,
     "H=s" => \$opt_H, "hostname=s"   => \$opt_H);

if ($opt_V) {
    print_revision($PROGNAME,'$Revision: 1.2 $');
    exit $ERRORS{'OK'};
}

if ($opt_h) {
    print_help();
    exit $ERRORS{'OK'};
}

##################################################
#####      Verify Options
##

$opt_H = shift unless ($opt_H);
(print_usage() && exit $ERRORS{'OK'}) unless ($opt_H);

($opt_v) || ($opt_v = shift) || ($opt_v = "1");
my $snmp = $1 if ($opt_v =~ /(\d)/);

($opt_C) || ($opt_C = shift) || ($opt_C = "public");
($opt_c) || ($opt_c = shift) || ($opt_c = 100);
my $critical = $1 if ($opt_c =~ /([0-9]+)/);

($opt_w) || ($opt_w = shift) || ($opt_w = 80);
my $warning = $1 if ($opt_w =~ /([0-9]+)/);

if ($critical <= $warning){
    print "(--crit) must be superior to (--warn)";
    print_usage();
    exit $ERRORS{'OK'};
}

my $start=time;


#################################################
#####            Plugin snmp requests
##

my $OID_IN_ERRORS = ".1.3.6.1.2.1.2.2.1.14";
my $OID_OUT_ERRORS = ".1.3.6.1.2.1.2.2.1.20";


# create a SNMP session

my ($session, $error) = Net::SNMP->session(-hostname => $opt_H, -community => $opt_C, -version => $snmp);
if (!defined($session)) {
    print("UNKNOWN: SNMP Session : $error");
    exit $ERRORS{'UNKNOWN'};
}

#######  Get IN ERRORS

$result_in = $session->get_table(Baseoid => $OID_IN_ERRORS);
if (!defined($result_in)) {
    printf("ERROR: IN_ERRORS :  %s.\n", $session->error);
    $session->close;
    exit $ERRORS{'UNKNOWN'};
}

# loop for each interface
foreach my $err (oid_lex_sort(keys %$result_in)) {
    $nb_in_errors[scalar(@nb_in_errors)] = $result_in->{$err};
}
# #######  Get OUT ERRORS

$result_out = $session->get_table(Baseoid => $OID_OUT_ERRORS);
if (!defined($result_out)) {
    printf("ERROR: OUT_ERRORS : %s.\n", $session->error);
    $session->close;
    exit $ERRORS{'UNKNOWN'};
}
foreach my $err (oid_lex_sort(keys %$result_out)) {
    $nb_out_errors[scalar(@nb_out_errors)] = $result_out->{$err};
}

# #############################################
# #####      read and write in buffer file
# ##

for (my $i = 0; $i < scalar(@nb_in_errors); $i++) {
    if (-e "@CENTPLUGINS_TMP@/packet_errors_if".$i."_".$opt_H.".tmp") {
		open(FILE,"<"."@CENTPLUGINS_TMP@/packet_errors_if".$i."_".$opt_H.".tmp");
		while($row = <FILE>){
		    my @last_values = split(":",$row);
		    $last_check_time[$i] = $last_values[0];
		    $last_in_errors[$i] = $last_values[1];
		    $last_out_errors[$i] = $last_values[2];
		    $flg_created[$i] = 1;
		}
		close(FILE);
    } else {
		$flg_created[$i] = 0;
    }

    $update_time = time;
    unless (open(FILE,">"."@CENTPLUGINS_TMP@/packet_errors_if".$i."_".$opt_H.".tmp")){
	print "Unknown - @CENTPLUGINS_TMP@/packet_errors_if".$i."_".$opt_H.".tmp!\n";
	exit $ERRORS{"UNKNOWN"};
}
    print FILE "$update_time:$nb_in_errors[$i]:$nb_out_errors[$i]";
    close(FILE);
    if ($flg_created[$i] eq 0){
		print "First execution : Buffer in creation.... \n";
    }
}

# #############################################
# #####          return result
# ##
my $status = "OK";
my @msg;
my $diff_test = 0;
for (my $i = 0; $i < scalar(@nb_in_errors); $i++) {
    my $interface = $i+1;
    if ($flg_created[$i]) {
		if (($nb_in_errors[$i] - $last_in_errors[$i] >= $critical) or ($nb_out_errors[$i] - $last_out_errors[$i] >= $critical)){ 
		    $msg[$i] = "$interface:critical ";
		    $status = "CRITICAL";
		}
		if (($nb_in_errors[$i] - $last_in_errors[$i] >= $warning) or ($nb_out_errors[$i] - $last_out_errors[$i] >= $warning)){
		    if (!defined($msg[$i])) {
				$msg[$i] = "$interface:warning ";
		    }	
		    if ($status ne "CRITICAL") {
				$status = "WARNING";
		    }
		}
		$diff_test = 1;
    }
}

if (!$diff_test) {
    exit($ERRORS{'UNKNOWN'});
}
my $output = "";
for (my $i = 0; $i < scalar (@msg); $i++) {
    if (defined($msg[$i])) {
	$output .= $msg[$i];
    }
}
if ($output ne ""){
    print $output."\n";
} else {
    print "Status OK on all interfaces\n";
}
exit($ERRORS{$status});
    sub print_usage () {
	print "\nUsage:\n";
	print "$PROGNAME\n";
	print "   -H (--hostname)   Hostname to query - (required)\n";
	print "   -C (--community)  SNMP read community (default to public)\n";
	print "                     used with SNMP v1 and v2c\n";
	print "   -v (--snmp_version)  1 for SNMP v1 (default)\n";
	print "                        2 for SNMP v2c\n";
	print "   -w (--warn)       Signal strength at which a warning message will be generated\n";
	print "                     (default 80)\n";
	print "   -c (--crit)       Signal strength at which a critical message will be generated\n";
	print "                     (default 100)\n";
	print "   -V (--version)    Plugin version\n";
	print "   -h (--help)       usage help\n";
}

sub print_help () {
    print "##############################################\n";
    print "#    Copyright (c) 2004-2007 Centreon        #\n";
    print "#    Bugs to http://bugs.oreon-project.org/  #\n";
    print "##############################################\n";
    print_usage();
    print "\n";
}